# Program Name : random.s
# Creator : Zachary Schellinger
# EN.605.204.81.FA24
# Homework for module 10
# This program will:
# allow the user to guess a random number generated by the computer
# user will first input a upper limit, then start guessing
# the program will inform the user if their guess is high or low
# The program will also keep track of and print the number of guesses
.text
.global main

main:

        # Save return to os on stack (from textbook)
        SUB     sp, sp, #4
        STR     lr, [sp, #0]

        # -----------------------------------------------
        MOV r6, #0
        # Enter the menu loop
menuloop:

        # Give user a menu
        LDR     r0, =menuprompt
        BL      printf

        # Scan user input
        LDR     r0, =upperlimitinput
        LDR     r1, =upperlimit
        BL      scanf

        # save user input in r9
        LDR     r1, =upperlimit
        LDR     r9, [r1, #0]

        # is the user input -1?
        MOV     r0, #-1
        CMP     r9, r0
        BEQ     end

        # Generate random number using the upper limit
        # r0 - min random number
        # r1 - max random number
random:
        # seed ran num generator
        MOV r0, #1
        BL srand

        # generate random number
        BL rand
        MOV r8, r0

        # random number is in r0
        # scale random number to range
        # in order to get a numer in range we must follow this formuala
        # = rand - ((ran / max) * max))
        # r9 - max value
        # r8 - random number (pre scale)
        # r7 - random number (post scale)

        # Random number / max
        # r0 - numer to be divided
        # r1 - divisor
        MOV r0, r8
        MOV r1, r9
        BL __aeabi_idiv

        # result is in r0
        # ((ran / max) * max
        MUL r7, r0, r9

        # ran - ((ran / max) * max))
        SUB r7, r8, r7

        # scaled random number in r7

        MOV r1, r7
        LDR r0, =testformat
        BL printf


# once the random number is generated, we can start asking the user for an input and comparing
user_loop:

        # ask user to guess number
        LDR r0, =guessprompt
        BL printf

        # scan user guess
        LDR r0, =guessinput
        LDR r1, =usrguess
        BL scanf

        # save user input
        LDR r1, =usrguess
        LDR r5, [r1, #0]

        # increment counter
        ADD r6, #1

        # check 1 <= usrinput <= max or -1 to exit
        MOV r0, #-1
        CMP r5, r0
        BEQ end

        MOV r0, #0
        MOV r1, #1
        CMP r5, r1
        MOVGE r0, #1

        MOV r1, #0
        CMP r5, r9
        MOVLE r1, #1

        AND r0, r0, r1
        MOV r1, #1
        CMP r0, r1
        BEQ validguess

        # guess is invalid
        LDR r0, =invalidguessprompt
        BL printf
        B user_loop


validguess:
        #compare user guess and random number
        CMP r5, r7
        BEQ correct_guess
        # will this work?
        BLT to_low
        BGT to_high
        #else
        B user_loop

correct_guess:
        # move counter to r1
        MOV r1, r6
        LDR r0, =correctformat
        BL printf
        B menuloop

to_low:
        LDR r0, =lowprompt
        BL printf
        B user_loop

to_high:
        LDR r0, =highprompt
        BL printf
        B user_loop

end:

        LDR     lr, [sp, #0]
        ADD     sp, sp, #4
        MOV     pc, lr

# End main


        # -----------------------------------------------

.data
        #prompts
        menuprompt: .asciz "Please enter an upper limit (-1 to exit): "
        guessprompt: .asciz "Please enter your guess: "
        invalidguessprompt: .asciz "Your guess is invalid, please try again.\n"
        highprompt: .asciz "Your guess is to high.\n"
        lowprompt: .asciz "Your guess is to low.\n"

        #input format
        upperlimitinput:        .asciz "%d"
        guessinput: .asciz "%d"


        #output format
        correctformat: .asciz "Correct, it took %d tries to guess the random number.\n"
        testformat: .asciz "random number is %d\n"

        #space reservation
        upperlimit:     .word 0
        usrguess: .word 0
